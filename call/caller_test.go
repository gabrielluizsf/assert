package call

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"testing"
)

func Test(t *testing.T) {
	caller := Caller()
	expectedLine := 12

	path, err := os.Getwd()
	if err != nil {
		t.Fatal(err)
	}

	filePath := filepath.ToSlash(fmt.Sprintf("%s/%s", path, "caller_test.go"))
	expected := fmt.Sprintf("%s:%d", filePath, expectedLine)

	if caller != expected {
		t.Fatalf("invalid file: expected: %s received: %s", expected, caller)
	}
}

func TestCaller(t *testing.T) {
	funcForPC = func(uintptr) *runtime.Func {
		return nil
	}

	caller := Caller()
	if caller != "" {
		t.Fatalf("Expected empty caller, but got: %s", caller)
	}
	funcForPC = runtime.FuncForPC

	callerInfo = func(skip int) (uintptr, string, int, bool) {
		return 0, "<autogenerated>", 0, true
	}

	caller = Caller()
	if caller != "" {
		t.Fatalf("Expected an empty caller for autogenerated file, but got: %s", caller)
	}
	callerInfo = runtime.Caller

	callerInfo = func(skip int) (uintptr, string, int, bool) {
		return 0, "", 0, false
	}

	caller = Caller()
	if caller != "" {
		t.Fatalf("Expected an empty caller for autogenerated file, but got: %s", caller)
	}

	callerInfo = runtime.Caller

	var call = func() {
		caller = Caller()
	}

	call()

	expectedLine := 64

	path, err := os.Getwd()
	if err != nil {
		t.Fatal(err)
	}

	filePath := filepath.ToSlash(fmt.Sprintf("%s/%s", path, "caller_test.go"))
	expected := fmt.Sprintf("%s:%d", filePath, expectedLine)

	if caller != expected {
		t.Fatalf("invalid file: expected: %s received: %s", expected, caller)
	}

	t.Run("Test caller with different context", func(t *testing.T) {
		var caller string
		var customFunc = func() {
			caller = Caller()
		}

		customFunc()

		expectedLine := 86

		path, err := os.Getwd()
		if err != nil {
			t.Fatal(err)
		}

		filePath := filepath.ToSlash(fmt.Sprintf("%s/%s", path, "caller_test.go"))
		expected := fmt.Sprintf("%s:%d", filePath, expectedLine)

		if caller != expected {
			t.Fatalf("invalid file: expected: %s received: %s", expected, caller)
		}
	})

	t.Run("Test caller with nested function", func(t *testing.T) {
		var caller string
		var outerFunc = func() {
			var innerFunc = func() {
				caller = Caller()
			}
			innerFunc()
		}

		outerFunc()

		expectedLine := 112

		path, err := os.Getwd()
		if err != nil {
			t.Fatal(err)
		}

		filePath := filepath.ToSlash(fmt.Sprintf("%s/%s", path, "caller_test.go"))
		expected := fmt.Sprintf("%s:%d", filePath, expectedLine)

		if caller != expected {
			t.Fatalf("invalid file: expected: %s received: %s", expected, caller)
		}
	})
}
